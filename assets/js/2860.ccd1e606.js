"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[2860],{2860:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>p});var i=t(87462),a=(t(67294),t(3905));t(45475);const s={title:"Type Hierarchy",slug:"/lang/type-hierarchy"},c=void 0,r={unversionedId:"lang/type-hierarchy",id:"lang/type-hierarchy",title:"Type Hierarchy",description:"Types in Flow form a hierarchy based on subtyping:",source:"@site/docs/lang/type-hierarchy.md",sourceDirName:"lang",slug:"/lang/type-hierarchy",permalink:"/en/docs/lang/type-hierarchy",draft:!1,editUrl:"https://github.com/facebook/flow/edit/main/website/docs/lang/type-hierarchy.md",tags:[],version:"current",frontMatter:{title:"Type Hierarchy",slug:"/lang/type-hierarchy"},sidebar:"docsSidebar",previous:{title:"Subsets & Subtypes",permalink:"/en/docs/lang/subtypes"},next:{title:"Type Variance",permalink:"/en/docs/lang/variance"}},o={},p=[],y={toc:p};function m(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,i.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"Types in Flow form a hierarchy based on ",(0,a.mdx)("a",{parentName:"p",href:"../subtypes"},"subtyping"),":"),(0,a.mdx)("mermaid",{value:'graph BT\n\nmixed -.- any\n\nsymbol --\x3e mixed\nnull --\x3e mixed\nmaybe["Maybe:\n  ?string"]\nmaybe --\x3e mixed\nnull --\x3e maybe\nvoid --\x3e maybe\nvoid --\x3e mixed\nstring --\x3e maybe\nstring --\x3e mixed\n\nunion["Union:\n  number | bigint"]\nnumber --\x3e union\nnumber --\x3e mixed\nunion --\x3e mixed\nbigint --\x3e mixed\nbigint --\x3e union\n\nboolean --\x3e mixed\ntrue --\x3e boolean\nfalse --\x3e boolean\n\nempty-interface["interface {}"] --\x3e mixed\nsome-interface["interface {prop: string}"] --\x3e empty-interface\nsomeclass["class A {prop: string}"] --\x3e some-interface\ninexact-empty-obj["Inexact empty object:\n  {...}"]\ninexact-empty-obj --\x3e empty-interface\ninexact-some-obj["Inexact object:\n  {prop: string, ...}"] --\x3e inexact-empty-obj\ninexact-some-obj --\x3e some-interface\nexact-some-obj["Exact object:\n  {prop: string}"] --\x3e inexact-some-obj\nexact-empty-obj["Exact empty object:\n  {}"]\nexact-empty-obj --\x3e inexact-empty-obj\nroarray["$ReadOnlyArray&lt;T>"] --\x3e empty-interface\ntuple["Tuple:\n  [T, T]"]\ntuple --\x3e roarray\narray["Array&lt;T>"] --\x3e roarray\n\nany-func["Function:\n  (...$ReadOnlyArray&lt;empty>) => mixed"]\nany-func --\x3e empty-interface\nsome-func["(number) => boolean"] --\x3e any-func\nsome-func2["(string) => string"] --\x3e any-func\n\ninter["Intersection:\n  (number => boolean) & (string => string)"]\ninter --\x3e some-func\ninter --\x3e some-func2\n\nempty --\x3e inter\nempty --\x3e null\nempty --\x3e void\nempty --\x3e true\nempty --\x3e false\nempty --\x3e exact-some-obj\nempty --\x3e exact-empty-obj\nempty --\x3e tuple\nempty --\x3e array\nempty --\x3e string\nempty --\x3e number\nempty --\x3e bigint\nempty --\x3e someclass\nempty --\x3e symbol\nany-bottom["any"] -.- empty\n\nclick mixed "../../types/mixed"\nclick any "../../types/any"\nclick any-bottom "../../types/any"\nclick empty "../../types/empty"\nclick boolean "../../types/primitives/#toc-booleans"\nclick number "../../types/primitives/#toc-numbers"\nclick string "../../types/primitives/#toc-strings"\nclick symbol "../../types/primitives/#toc-symbols"\nclick bigint "../../types/primitives/#toc-bigints"\nclick null "../../types/primitives/#toc-null-and-void"\nclick void "../../types/primitives/#toc-null-and-void"\nclick true "../../types/literals"\nclick false "../../types/literals"\nclick union "../../types/unions"\nclick inter "../../types/intersections"\nclick maybe "../../types/maybe"\nclick array "../../types/arrays"\nclick roarray "../../types/arrays/#toc-readonlyarray"\nclick tuple "../../types/tuples"\nclick someclass "../../types/classes"\nclick empty-interface "../../types/interfaces"\nclick some-interface "../../types/interfaces"\nclick exact-some-obj "../../types/objects"\nclick exact-empty-obj "../../types/objects"\nclick inexact-some-obj "../../types/objects/#exact-and-inexact-object-types"\nclick inexact-empty-obj "../../types/objects/#exact-and-inexact-object-types"\nclick any-func "../../types/functions"\nclick some-func "../../types/functions"\nclick some-func2 "../../types/functions"\n\nclassDef default fill:#eee, stroke:#000, stroke-width:1px'}),(0,a.mdx)("p",null,"Click on a node to go to the documentation for that type."),(0,a.mdx)("p",null,"Types appearing higher in this graph are more general, while those appearing lower are more specific.\nAn arrow pointing from type ",(0,a.mdx)("inlineCode",{parentName:"p"},"A")," to type ",(0,a.mdx)("inlineCode",{parentName:"p"},"B")," means that ",(0,a.mdx)("inlineCode",{parentName:"p"},"A")," is a subtype of ",(0,a.mdx)("inlineCode",{parentName:"p"},"B"),".\nFor example, the type ",(0,a.mdx)("inlineCode",{parentName:"p"},"string")," is a subtype of ",(0,a.mdx)("inlineCode",{parentName:"p"},"?string"),"."),(0,a.mdx)("p",null,"How can ",(0,a.mdx)("inlineCode",{parentName:"p"},"any")," be at both the top and the bottom? Because ",(0,a.mdx)("a",{parentName:"p",href:"../../types/any/"},"it is unsafe"),". This is denoted with a dotted line."))}m.isMDXComponent=!0}}]);